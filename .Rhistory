devtools::document()
setwd("..")
devtools::install("myfirstpackage")
?my_pow
devtools::check()
devtools::check()
setwd(project_3)
setwd(myfirstpackage\)
setwd("~/Desktop/Stat302/projects/project_3/myfirstpackage")
devtools::check()
devtools::check()
use_this::use_testthat()
use_this::use_testthat()
install.packages("usethis")
install.packages("usethis")
usethis::use_testthat()
install(testthat)
install.packages("testthat")
use_this::use_testthat()
usethis::use_testthat()
usethis::use_travis()
setwd(..)
setwd("..")
setwd("..")
setwd("..")
library(ggpubr)
library(ggpubr)
library(tidyverse)
library(data.table)
# generate data
set.seed(302)
n <- 30
# generate data
set.seed(302)
n <- 30
x <- sort(runif(n, -3, 3))
y <- 2*x + 2*rnorm(n)
x_test <- sort(runif(n, -3, 3))
y_test <- 2*x_test + 2*rnorm(n)
df_train <- data.frame("x" = x, "y" = y)
df_test <- data.frame("x" = x_test, "y" = y_test)
# store a theme
my_theme <- theme_bw(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
# store a theme
my_theme <- theme_bw(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
# generate plots
g_train <- ggplot(df_train, aes(x = x, y = y)) + geom_point() +
xlim(-3, 3) + ylim(min(y, y_test), max(y, y_test)) +
labs(title = "Training Data") + my_theme
library(data.table)
# generate data
set.seed(302)
n <- 30
x <- sort(runif(n, -3, 3))
y <- 2*x + 2*rnorm(n)
x_test <- sort(runif(n, -3, 3))
y_test <- 2*x_test + 2*rnorm(n)
df_train <- data.frame("x" = x, "y" = y)
df_test <- data.frame("x" = x_test, "y" = y_test)
# store a theme
my_theme <- theme_bw(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
# generate plots
g_train <- ggplot(df_train, aes(x = x, y = y)) + geom_point() +
xlim(-3, 3) + ylim(min(y, y_test), max(y, y_test)) +
labs(title = "Training Data") + my_theme
g_test <- ggplot(df_test, aes(x = x, y = y)) + geom_point() +
xlim(-3, 3) + ylim(min(y, y_test), max(y, y_test)) +
labs(title = "Test Data") + my_theme
ggarrange(g_train, g_test) # from ggpubr, to put side-by-side
#creates empty list to contain models
my_models <- rep(list(NA), 10)
#loops k 1 trough 10
for(i in 1:10) {
#creates a model of the degree provided by the loop
my_models[[i]] <- lm(y ~ poly(x, i), data = df_train)
}
**1b.** For each model from (a), record the training error. Then predict `y_test` from `x_test` and also record the test error.
```{r, message = FALSE}
#creates empty vector to contain training errors
train_err <- rep(NA, 10)
#creates empty vector to contain test errors
test_err <- rep(NA, 10)
#loops k 1 trough 10
for(i in 1:10) {
#calculate yhat for training
yhat_train <- predict(my_models[[i]])
#calculate training error
train_err[i] <- mean((df_train$y - yhat_train)^2)
#calculate yhat for testing
yhat_test <- predict(my_models[[i]], data.frame(x = df_test$x))
#calculate testing error
test_err[i] <- mean((df_test$y - yhat_test)^2)
}
```
#creates empty vector to contain training errors
train_err <- rep(NA, 10)
#creates empty vector to contain test errors
test_err <- rep(NA, 10)
#loops k 1 trough 10
for(i in 1:10) {
#calculate yhat for training
yhat_train <- predict(my_models[[i]])
#calculate training error
train_err[i] <- mean((df_train$y - yhat_train)^2)
#calculate yhat for testing
yhat_test <- predict(my_models[[i]], data.frame(x = df_test$x))
#calculate testing error
test_err[i] <- mean((df_test$y - yhat_test)^2)
}
#creates empty vector to contain training errors
train_err <- rep(NA, 10)
#creates empty vector to contain test errors
test_err <- rep(NA, 10)
#loops k 1 trough 10
for(i in 1:10) {
#calculate yhat for training
yhat_train <- predict(my_models[[i]])
#calculate training error
train_err[i] <- mean((df_train$y - yhat_train)^2)
#calculate yhat for testing
yhat_test <- predict(my_models[[i]], data.frame(x = df_test$x))
#calculate testing error
test_err[i] <- mean((df_test$y - yhat_test)^2)
}
#creates a dataframe containing both training error and test error
combined_errors <- data.frame("K" = 1:10,
"Test_error" = test_err,
"Training_error" = train_err
)
#prints as a table
as.data.table(combined_errors)
#adds a factor "Test" to all test observations
df_test <- df_test %>%
mutate(category = as.factor("Test"))
#adds a factor "Training" to all training observations
df_train <- df_train %>%
mutate(category = as.factor("Training"))
#combines training and testing data
df_all <- rbind(df_test, df_train)
x_fit <- data.frame(x = seq(-3, 3, length = 100))
#creates the regession line for k = 10
line_fit_10 <- data.frame(x = x_fit,
y = predict(my_models[[10]], newdata = x_fit)
)
#creates a plot cotaining treaining and test data colored by split
g_split <- ggplot(df_all, aes(x = x, y = y, color = category)) +
geom_point() +
my_theme
#plot the selected model fit on the data
g_split +
geom_line(data = line_fit_10, aes(y = y, x = x), col = "purple", lwd = 1) +
labs(title = "Low Training Error Fit",
subtitle = paste("Training error:", round(train_err[10], 3))
)
usethis::use_test("my_pow")
usethis::use_test("f_to_c")
devtools::check()
devtools::test()
usethis::use_coverage()
data(iris)
my_iris <- iris
usethis::use_data(my_iris)
usethis::use_vignette("tutorial", title = "Project 3: myfirstpackage Tutorial")
devtools::install_github("MatteVin/myfirstpackage", build_vignette = TRUE, build_opts = c())
library(Demo)
library(myfirstpackage)
help(package = "myfirstpackage", help_type = "html")
utils::browseVignettes(package = "myfirstpackage")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_test("my_pow")
devtools::check()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
sethis::use_travis()
usethis::use_travis()
Check
?t.test
#' @keywords t-test
#'
#' @return Numeric indicating temperature \code{temp_F} converted to Celsius.
#'
#' @examples
#' f_to_c(32)
#' f_to_c(212)
#'
#' @export
#t-test function
my_t_test <- function(x, alternative, mu) {
#check for the parameter alternative to be one of the three allowed, if it isn't
if(!(alternative %in% c("two.sided", "less", "greater"))){
warning("alternative not recognized")
}
#saves the length of the vector as n
n <- length(x)
#calculates the t-statistic
test_stat <- (mean(x) - mu) / (sd(x) / sqrt(n))
#calculates the degrees of freedom
df <- n - 1
#calculate p_val lower tail.
p_val <- pt(test_stat, df)
#change p_val to upper tail.
p_val <- if(grepl(alternative, "greater")){
(1 - p_val)
#change p_val to both tails.
} else if(grepl(alternative, "two.sided")){
min(p_val, 1 - p_val) * 2
} else { p_val }
#combines the results in one list
result <- list("test_stat" = test_stat,
"df" = df,
"alternative" = alternative,
"p_val" = p_val
)
#returns the results
return(result)
}
devtools::document()
?my_t_test
---
title: "Lab 3"
author: "Matteo Vindrola"
date: "2/10/2020"
output: html_document
---
<!--- Begin styling code. --->
<style type="text/css">
/* Whole document: */
body{
font-family: "Palatino Linotype", "Book Antiqua", Palatino, serif;
font-size: 12pt;
}
h1.title {
font-size: 38px;
text-align: center;
}
h4.author {
font-size: 18px;
text-align: center;
}
h4.date {
font-size: 18px;
text-align: center;
}
</style>
<!--- End styling code. --->
## Part 1. t-test (10 points)
```{r}
#t-test function
my_t.test <- function(x, alternative, mu) {
#check for the parameter alternative to be one of the three allowed, if it isn't
if(!(alternative %in% c("two.sided", "less", "greater"))){
warning("alternative not recognized")
}
#saves the length of the vector as n
n <- length(x)
#calculates the t-statistic
test_stat <- (mean(x) - mu) / (sd(x) / sqrt(n))
#calculates the degrees of freedom
df <- n - 1
#calculate p_val lower tail.
p_val <- pt(test_stat, df)
#change p_val to upper tail.
p_val <- if(grepl(alternative, "greater")){
(1 - p_val)
#change p_val to both tails.
} else if(grepl(alternative, "two.sided")){
min(p_val, 1 - p_val) * 2
} else { p_val }
#combines the results in one list
result <- list("test_stat" = test_stat,
"df" = df,
"alternative" = alternative,
"p_val" = p_val
)
#returns the results
return(result)
}
```
We set up a vector containing 10 observations from a random normal distribution with mean of 7 and sd of 3. We first use  t.test() with $\mu$ = 3 and the "less" alternative. Then we use  my_t.test() and see the results are the same as for t.test().
```{r}
x <- rnorm(10, mean = 7, 3)
t.test(x, alternative = "less", mu = 3)
my_t.test(x, "less", 3)
```
## Part 2. Linear model (10 points)
```{r}
#Creates my_lm a function that takes in as parameters a formula and a dataset
#returning a table containing the appropiate coefficients for the linear model.
my_lm <- function(formula_lm, data_lm) {
#Extracts model matrix X.
X_lm <- model.matrix(formula_lm, data =  data_lm)
#Extract a model respopnse Y.
Y_lm <- model.response(model.frame(data_lm))
#Estimates linear regression coefficients.
beta_lm <- solve(t(X_lm) %*% X_lm) %*%  t(X_lm) %*% Y_lm
#Estimates the degrees of freedom.
df_lm <- nrow(data_lm) - nrow(beta_lm)
#Estimates the variance.
var_lm <- sum(((Y_lm - X_lm %*% beta_lm )^2)) / df_lm
#Estimates the standard error.
suppressWarnings(std_error_lm <- diag(sqrt(var_lm * solve(t(X_lm) %*% X_lm))))
#Estimates the t value.
t_value_lm <- beta_lm / std_error_lm
#Estimates the p value of the t test.
p_of_t <- pt(abs(t_value_lm), df_lm, lower.tail = FALSE)*2
#Combines coefficients, standard errors, t values and p values of the t test,
#all in one matrix
final_matrix <- cbind(beta_lm, std_error_lm, t_value_lm, p_of_t)
#appropiatly names the culums of the matrix
colnames(final_matrix) <-  c("Estimate", "Std. Error", "t value", "Pr(>|t|)")
#returns the final matrix as a table
return(as.table(final_matrix))
}
```
