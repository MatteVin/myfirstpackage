devtools::document()
setwd("..")
devtools::install("myfirstpackage")
?my_pow
devtools::check()
devtools::check()
setwd(project_3)
setwd(myfirstpackage\)
setwd("~/Desktop/Stat302/projects/project_3/myfirstpackage")
devtools::check()
devtools::check()
use_this::use_testthat()
use_this::use_testthat()
install.packages("usethis")
install.packages("usethis")
usethis::use_testthat()
install(testthat)
install.packages("testthat")
use_this::use_testthat()
usethis::use_testthat()
usethis::use_travis()
setwd(..)
setwd("..")
setwd("..")
setwd("..")
library(ggpubr)
library(ggpubr)
library(tidyverse)
library(data.table)
# generate data
set.seed(302)
n <- 30
# generate data
set.seed(302)
n <- 30
x <- sort(runif(n, -3, 3))
y <- 2*x + 2*rnorm(n)
x_test <- sort(runif(n, -3, 3))
y_test <- 2*x_test + 2*rnorm(n)
df_train <- data.frame("x" = x, "y" = y)
df_test <- data.frame("x" = x_test, "y" = y_test)
# store a theme
my_theme <- theme_bw(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
# store a theme
my_theme <- theme_bw(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
# generate plots
g_train <- ggplot(df_train, aes(x = x, y = y)) + geom_point() +
xlim(-3, 3) + ylim(min(y, y_test), max(y, y_test)) +
labs(title = "Training Data") + my_theme
library(data.table)
# generate data
set.seed(302)
n <- 30
x <- sort(runif(n, -3, 3))
y <- 2*x + 2*rnorm(n)
x_test <- sort(runif(n, -3, 3))
y_test <- 2*x_test + 2*rnorm(n)
df_train <- data.frame("x" = x, "y" = y)
df_test <- data.frame("x" = x_test, "y" = y_test)
# store a theme
my_theme <- theme_bw(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
# generate plots
g_train <- ggplot(df_train, aes(x = x, y = y)) + geom_point() +
xlim(-3, 3) + ylim(min(y, y_test), max(y, y_test)) +
labs(title = "Training Data") + my_theme
g_test <- ggplot(df_test, aes(x = x, y = y)) + geom_point() +
xlim(-3, 3) + ylim(min(y, y_test), max(y, y_test)) +
labs(title = "Test Data") + my_theme
ggarrange(g_train, g_test) # from ggpubr, to put side-by-side
#creates empty list to contain models
my_models <- rep(list(NA), 10)
#loops k 1 trough 10
for(i in 1:10) {
#creates a model of the degree provided by the loop
my_models[[i]] <- lm(y ~ poly(x, i), data = df_train)
}
**1b.** For each model from (a), record the training error. Then predict `y_test` from `x_test` and also record the test error.
```{r, message = FALSE}
#creates empty vector to contain training errors
train_err <- rep(NA, 10)
#creates empty vector to contain test errors
test_err <- rep(NA, 10)
#loops k 1 trough 10
for(i in 1:10) {
#calculate yhat for training
yhat_train <- predict(my_models[[i]])
#calculate training error
train_err[i] <- mean((df_train$y - yhat_train)^2)
#calculate yhat for testing
yhat_test <- predict(my_models[[i]], data.frame(x = df_test$x))
#calculate testing error
test_err[i] <- mean((df_test$y - yhat_test)^2)
}
```
#creates empty vector to contain training errors
train_err <- rep(NA, 10)
#creates empty vector to contain test errors
test_err <- rep(NA, 10)
#loops k 1 trough 10
for(i in 1:10) {
#calculate yhat for training
yhat_train <- predict(my_models[[i]])
#calculate training error
train_err[i] <- mean((df_train$y - yhat_train)^2)
#calculate yhat for testing
yhat_test <- predict(my_models[[i]], data.frame(x = df_test$x))
#calculate testing error
test_err[i] <- mean((df_test$y - yhat_test)^2)
}
#creates empty vector to contain training errors
train_err <- rep(NA, 10)
#creates empty vector to contain test errors
test_err <- rep(NA, 10)
#loops k 1 trough 10
for(i in 1:10) {
#calculate yhat for training
yhat_train <- predict(my_models[[i]])
#calculate training error
train_err[i] <- mean((df_train$y - yhat_train)^2)
#calculate yhat for testing
yhat_test <- predict(my_models[[i]], data.frame(x = df_test$x))
#calculate testing error
test_err[i] <- mean((df_test$y - yhat_test)^2)
}
#creates a dataframe containing both training error and test error
combined_errors <- data.frame("K" = 1:10,
"Test_error" = test_err,
"Training_error" = train_err
)
#prints as a table
as.data.table(combined_errors)
#adds a factor "Test" to all test observations
df_test <- df_test %>%
mutate(category = as.factor("Test"))
#adds a factor "Training" to all training observations
df_train <- df_train %>%
mutate(category = as.factor("Training"))
#combines training and testing data
df_all <- rbind(df_test, df_train)
x_fit <- data.frame(x = seq(-3, 3, length = 100))
#creates the regession line for k = 10
line_fit_10 <- data.frame(x = x_fit,
y = predict(my_models[[10]], newdata = x_fit)
)
#creates a plot cotaining treaining and test data colored by split
g_split <- ggplot(df_all, aes(x = x, y = y, color = category)) +
geom_point() +
my_theme
#plot the selected model fit on the data
g_split +
geom_line(data = line_fit_10, aes(y = y, x = x), col = "purple", lwd = 1) +
labs(title = "Low Training Error Fit",
subtitle = paste("Training error:", round(train_err[10], 3))
)
